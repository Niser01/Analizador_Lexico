programa               -> sentencia programa_Funcion
programa_Funcion       -> EoL programa | programa
sentencia              -> declaracion | bloque_programa | EoL | asignacion | lectura | escritura | condicional | casos | mientras | repita | para | funcion | procedimiento | registro | arreglo
sentencia_acciones     -> EoL | asignacion | lectura | escritura | condicional | casos | mientras | repita | para | arreglo | llamar
llamar                 -> 'llamar' llamar_procedimiento
llamar_procedimiento   -> EoL | identificador expresion
declaracion            -> palabras_reservadas identificador declaracion_Ciclo EoL
declaracion_Ciclo      -> ',' declaracion_Ciclo2 EoL
declaracion_Ciclo2     -> palabras_reservadas identificador EoL | palabras_reservadas EoL | identificador EoL
asignacion             -> identificador '=' expresion EoL
lectura                -> 'lea' lectura_Ciclo EoL
lectura_Ciclo          -> identificador token lectura_Ciclo EoL | EoL
escritura              -> 'escriba' escritura_Ciclo EoL
escritura_Ciclo        -> identificador token palabras_reservadas escritura_Ciclo EoL | identificador escritura_Ciclo EoL | token escritura_Ciclo EoL | palabras_reservadas escritura_Ciclo EoL | identificador EoL
identificador          -> 'id'
expresion              -> factor_expresion expresion_Ciclo
expresion_Ciclo        -> factor_expresion expresion_Ciclo | EoL
factor_expresion       -> token | identificador | palabras_reservadas
palabras_reservadas    -> 'entero' | 'real' | 'booleano' | 'caracter' | 'cadena' | 'verdadero' | 'falso' | 'y' | 'o' | 'mod' | 'var' | 'retorne' | 'div'
EoL                    -> 'newline'
token                  -> ',' | '=' | 'tkn_real' | 'tkn_integer' | 'tkn_str' | 'tkn_opening_par' | 'tkn_opening_bra' | 'tkn_closing_bra' | 'tkn_closing_par' | 'tkn_period' | 'tkn_colon' | 'tkn_plus' | 'tkn_minus' | 'tkn_times' | 'tkn_div' | 'tkn_power' | 'tkn_neq' | 'tkn_leq' | 'tkn_less' | 'tkn_geq' | 'tkn_greater' | 'tkn_equal' | 'tkn_char'
condicional            -> 'si' expresion 'entonces' sentencia_condicional 'fin si'
sentencia_condicional  -> acciones_condicional sentencia_condicional_Ciclo | acciones_condicional
acciones_condicional    -> sentencia_acciones acciones_condicional
sentencia_condicional_Ciclo -> 'sino' acciones_condicional sentencia_condicional_Ciclo | EoL
casos                  -> 'caso' valor_caso ':' bloque_codigo_caso 'sino' bloque_codigo_caso 'fin caso'
valor_caso             -> id_casos_Ciclo valor_caso_tail | EoL
valor_caso_tail        -> ',' id_casos_Ciclo valor_caso_tail | EoL
id_casos_Ciclo         -> 'tkn_integer' | 'tkn_real'
bloque_codigo_caso     -> sentencia_acciones | EoL
mientras               -> 'mientras' expresion 'haga' ciclo_mientras 'fin mientras'
ciclo_mientras         -> sentencia_acciones ciclo_mientras | EoL
repita                 -> 'repita' ciclo_repita 'hasta' expresion
ciclo_repita           -> sentencia_acciones ciclo_repita | EoL
para                   -> 'para' expresion 'hasta' expresion 'haga' ciclo_para 'fin para'
ciclo_para             -> sentencia_acciones ciclo_para | EoL
procedimiento          -> 'procedimiento' identificador procedimiento_Ciclo 'inicio' acciones_procedimiento 'fin'
procedimiento_Ciclo    -> acciones_procedimiento procedimiento_Ciclo | EoL
acciones_procedimiento  -> sentencia_acciones | EoL
funcion                -> 'funcion' identificador funcion_Ciclo 'inicio' acciones_funcion 'fin'
funcion_Ciclo          -> declaracion_ciclo_funcion ':' palabras_reservadas | EoL
declaracion_ciclo_funcion -> declaracion declaracion_ciclo_funcion | EoL
acciones_funcion       -> sentencia_acciones acciones_funcion | EoL
registro               -> 'registro' identificador registro_Ciclo 'fin'
registro_Ciclo         -> declaracion registro_Ciclo | EoL
arreglo                -> 'arreglo' arreglo_Def
arreglo_Def            -> '[' 'tkn_integer' ']' 'de' palabras_reservadas identificador
bloque_programa        -> 'inicio' bloque_programa_Ciclo 'fin'
bloque_programa_Ciclo  -> sentencia_acciones bloque_programa_Ciclo | EoL
analizar               -> programa
